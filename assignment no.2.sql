use sakila;
-- Basic Aggregate Functions 
-- Q1 Retrieve the total number of rentals made in the Sakila database.
select 
     count(rental_id) 
	 as totalNo_of_Rental from rental ;

-- Q2 Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT AVG(DATEDIFF(return_date, rental_date)) 
	AS average_duration_in_days
    FROM rental;
-- String Functions
-- Q3 Display the first name and last name of customers in uppercase.
select 
     upper(first_name) , upper(last_name) 
     from customer ;

-- Q4 Extract the month from the rental date and display it alongside the rental ID.
select rental_id , 
     month(rental_date) from rental ;

-- GROUP BY
-- Q5 Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
select customer_id , 
	 count(rental_id) from rental 
     group by customer_id ;

-- Q6 Find the total revenue generated by each store. 
select store_id , count(amount) 
	 from payment 
     inner join store on payment.staff_id = store.manager_staff_id 
     group by store_id ;

-- Joins
-- Q7 Display the title of the movie, customer s first name, and last name who rented it. 
select title , concat(first_name , " " , last_name) as name from rental 
     inner join customer on rental.customer_id = customer.customer_id
     inner join inventory on rental.inventory_id = inventory.inventory_id
	 inner join film on inventory.inventory_id = film.film_id;

-- Q8 Retrieve the names of all actors who have appeared in the film "Gone with the Wind." 
select concat(first_name , " " ,last_name) as name 
	 from film_actor inner join film on film_actor.film_id = film.film_id
	 inner join actor on film_actor.actor_id = actor.actor_id where title = 'Gone with the Wind';

-- GROUP BY:
-- Q1 Determine the total number of rentals for each category of movies. 
select category.name , count(rental_id) from rental inner join inventory on rental.inventory_id = inventory.inventory_id
    join film on inventory.film_id = film.film_id
    join film_category on film.film_id = film_category.film_id
    join category on film_category.category_id = category.category_id group by category.name;

-- Q2 Find the average rental rate of movies in each language. 
select name , avg(rental_rate) from language 
    JOIN film on language.language_id = film.language_id group by name ;

-- Joins
-- Q3 Retrieve the customer names along with the total amount they've spent on rentals.
select concat(first_name , " " , last_name) as name , sum(amount) from customer 
    join payment on customer.customer_id = payment.payment_id
    join rental on customer.customer_id = rental.customer_id group by name ;

-- Q4 List the titles of movies rented by each customer in a particular city (e.g., 'London'). 
select concat(first_name , " " , last_name) as customer_name , city , title from customer 
    join address on customer.address_id = address.address_id
    join city on address.city_id = city.city_id
    join rental on customer.customer_id = rental.customer_id
    join inventory on rental.inventory_id = inventory.inventory_id
    join film on inventory.film_id = film.film_id where city = 'london';
    
-- Advanced Joins and GROUP BY
-- Q5 Display the top 5 rented movies along with the number of times they've been rented. 
select title , count(rental_id) as top_5_rented from inventory 
	join film on inventory.film_id = film.film_id
    join rental on inventory.inventory_id = rental.inventory_id 
    group by title order by top_5_rented desc limit 5 ;
    
-- Q6 Determine the customers who have rented movies from both stores (store ID 1 and store ID 2). 

-- Hint: Use JOINS with rental, inventory, and customer tables and consider COUNT() and GROUP BY. 
select customer.customer_id , concat(first_name , " " , last_name) as name from rental 
    join inventory on rental.inventory_id = inventory.inventory_id
    join customer on rental.customer_id = customer.customer_id 
    join store on inventory.store_id = store.store_id
    group by customer_id 
    having count(distinct(store.store_id))  = 2 ;